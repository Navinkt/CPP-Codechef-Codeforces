#include <bits/stdc++.h>
using namespace std;
 
#define ll long long
#define pii pair<int, int>
#define F first
#define S second
#define all(c) ((c).begin()), ((c).end())
#define sz(x) ((int)(x).size())
#define ld long double
 
template<class T,class U>
ostream& operator<<(ostream& os,const pair<T,U>& p){
    os<<"("<<p.first<<", "<<p.second<<")";
    return os;
}
 
template<class T>
ostream& operator <<(ostream& os,const vector<T>& v){
    os<<"{";
    for(int i = 0;i < (int)v.size(); i++){
        if(i)os<<", ";
        os<<v[i];
    }
    os<<"}";
    return os;
}
 
#ifdef LOCAL
#define cerr cout
#else
#endif
 
#define TRACE
 
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
    cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
    const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif
 
long long readInt(long long l,long long r,char endd){
    long long x=0;
    int cnt=0;
    int fi=-1;
    bool is_neg=false;
    while(true){
        char g=getchar();
        if(g=='-'){
            assert(fi==-1);
            is_neg=true;
            continue;
        }
        if('0'<=g && g<='9'){
            x*=10;
            x+=g-'0';
            if(cnt==0){
                fi=g-'0';
            }
            cnt++;
            assert(fi!=0 || cnt==1);
            assert(fi!=0 || is_neg==false);
            
            assert(!(cnt>19 || ( cnt==19 && fi>1) ));
        } else if(g==endd){
            if(is_neg){
                x= -x;
            }
            if(!(l<=x && x<=r))cerr<<l<<"<="<<x<<"<="<<r<<endl;
            assert(l<=x && x<=r);
            return x;
        } else {
            assert(false);
        }
    }
}
string readString(int l,int r,char endd){
    string ret="";
    int cnt=0;
    while(true){
        char g=getchar();
        assert(g!=-1);
        if(g==endd){
            break;
        }
        cnt++;
        ret+=g;
    }
    assert(l<=cnt && cnt<=r);
    return ret;
}
long long readIntSp(long long l,long long r){
    return readInt(l,r,' ');
}
long long readIntLn(long long l,long long r){
    return readInt(l,r,'\n');
}
string readStringLn(int l,int r){
    return readString(l,r,'\n');
}
string readStringSp(int l,int r){
    return readString(l,r,' ');
}
template<class T>
vector<T> readVector(int n, long long l, long long r){
    vector<T> ret(n);
    for(int i = 0; i < n; i++){
        ret[i] = i == n - 1 ? readIntLn(l, r) : readIntSp(l, r);
    }
    return ret;
}
 
const int INF = 1e9;
const ll INF_LL = 1LL << 60;
 
struct graph{
    vector<vector<int>> adj;
    vector<int> mate;
    int n;
    graph(int n) : n(n), adj(n), mate(n + n, -1){};
    
    void add_edge(int u, int v){
        adj[u].push_back(v);
    }
    
    void max_matching(){
        vector<int> vis(n), vis2(n);
        vector<int> reachable;
        function<void(int)> rec = [&](int u){
            reachable.push_back(u + n);
            vis2[u] = 1;
            for(int v : adj[u]) if(!vis2[v]) rec(v);
        };
        function<vector<int>(int)> get = [&](int x){
            reachable.clear();
            for(int u : adj[x]) if(!vis2[u]) rec(u);
            return reachable;
        };
        
        function<bool(int)> augment = [&](int u) {
            vis[u] = true;
            for (int w: get(u)) {
                if(w == mate[u]) continue;
                int v = mate[w];
                if (v < 0 || (!vis[v] && augment(v))) {
                    mate[u] = w;
                    mate[w] = u;
                    return true;
                }
            }
            return false;
        };
        while(true){
            int increased = false;
            fill(all(vis), 0);
            fill(all(vis2), 0);
            for(int u = 0; u < n; u++) if(mate[u] == -1 && augment(u)){
                increased = true;
                break;
            }
            if(!increased) return;
        }
    }
};
 
typedef long long Long;
 
struct Line {
    Long a, b, get(Long x) { return a * x + b; }
};
 
struct ConvexHull {
    int size;
    Line *hull;
    
    ConvexHull(){}
    
    ConvexHull(int maxSize) {
        hull = new Line[++maxSize], size = 0;
    }
    
    bool is_bad(int curr, int prev, int next) {
        Line c = hull[curr], p = hull[prev], n = hull[next];
        return (c.b - n.b) * __int128_t(c.a - p.a) <= (p.b - c.b) * __int128_t(n.a - c.a);
    }
    
    void add_line(Long a, Long b) {
        hull[size++] = (Line){a, b};
        while (size > 2 && is_bad(size - 2, size - 3, size - 1))
            hull[size - 2] = hull[size - 1], size--;
    }
    
    Long query(Long x) {
        int l = -1, r = size - 1;
        while (r - l > 1) {
            int m = (l + r) / 2;
            if (hull[m].get(x) <= hull[m + 1].get(x))
                l = m;
            else
                r = m;
        }
        return hull[r].get(x);
    }
};
 
int main(){
    int n = readIntSp(2, 100000), m = readIntSp(1, 200000), K = readIntLn(1, INF);
    vector<int> c = readVector<int>(n, 1, INF), t = readVector<int>(n, 1, INF), indeg(n), pos(n);
    graph G(n);
    vector<vector<pair<int, int>>> ADJ(n);
    for(int i = 0; i < m; i++){
        int u = readIntSp(0, n - 1), v = readIntSp(0, n - 1), w = readIntLn(1, 10000);
        G.add_edge(u, v);
        ADJ[u].push_back({v, w});
        indeg[v]++;
    }
    vector<int> V;
    for(int i = 0; i < n; i++) if(indeg[i] == 0) V.push_back(i);
    vector<int> nodes;
    while(!V.empty()){
        int u = V.back(); V.pop_back();
        pos[u] = n - 1 - nodes.size();
        nodes.push_back(u);
        for(int v : G.adj[u]){
            indeg[v]--;
            if(indeg[v] == 0){
                V.push_back(v);
            }
        }
    }
    vector<int> vis(n);
    vector<int> rev_nodes = nodes;
    reverse(all(nodes));
    for(int i = 0; i < n; i++) sort(all(G.adj[i]), [&](int u, int v){return pos[u] > pos[v];});
    int num = 0;
    while(accumulate(all(vis), 0) < n){
        num++;
        vector<int> dp(n);
        vector<int> prv(n);
        int best = -1;
        for(int x : nodes){
            prv[x] = x;
            dp[x] = !vis[x];
            for(int y : G.adj[x]){
                assert(pos[y] < pos[x]);
                int L = dp[y] + !vis[x];
                if(L > dp[x]){
                    dp[x] = L;
                    prv[x] = y;
                }
            }
            if(best == -1 || dp[x] > dp[best]) best = x;
        }
        while(prv[best] != best){
            vis[best] = 1;
            int P = best;
            while(vis[P]) P = prv[P];
            G.mate[best] = P + n;
            G.mate[P + n] = best;
            best = P;
        }
        vis[best] = 1;
    }
    G.max_matching();
    vector<vector<int>> paths;
    vector<int> path;
    function<bool(int, int)> getPath = [&](int x, int y){
        vis[x] = 1;
        if(x == y){
            path.push_back(y);
            return true;
        }
        for(int v : G.adj[x]){
            if(pos[v] < pos[y]) return false;
            if(vis[v]) continue;
            if(getPath(v, y)){
                path.push_back(x);
                return true;
            }
        }
        return false;
    };
    vector<vector<int>> mx(10, vector<int>(n, -1));
    vector<vector<int>> where = mx;
    vector<vector<vector<int>>> inv_mx(10, vector<vector<int>>(n));
    vector<int> L(n);
    
    for(int v : rev_nodes) if(G.mate[v + n] == -1){
        fill(all(vis), 0);
        path.clear();
        path.push_back(v);
        while(G.mate[v] != -1){
            int y = G.mate[v] - n;
            
            int position = path.size();
            getPath(v, y);
            path.pop_back();
            reverse(path.begin() + position, path.end());
            v = y;
        }
        reverse(all(path));
        for(int i = 0; i < path.size(); i++){
            where[paths.size()][path[i]] = i;
        }
        paths.push_back(path);
    }
    
    int k = paths.size();
    assert(k <= 10);
    for(int u : nodes){
        for(auto it : ADJ[u]){
            int v = it.first;
            L[u] = max(L[u], L[v] + it.second);
            for(int j = 0; j < k; j++) mx[j][u] = max(mx[j][u], mx[j][v]);
        }
        for(int i = 0; i < k; i++){
            if(mx[i][u] != -1) inv_mx[i][mx[i][u]].push_back(u);
            mx[i][u] = max(mx[i][u], where[i][u]);
        }
    }
    vector<ll> dp(n, INF_LL);
    dp[0] = 0;
    
    vector<ConvexHull> cht(k);
    for(int i = 0; i < k; i++) cht[i] = ConvexHull(paths[i].size());
    for(int u : nodes){
        int covered = 0;
        for(int i = 0; i < k; i++){
            int pos = where[i][u];
            if(pos != -1){
                covered = 1;
                cht[i].add_line(L[u] - K, - t[u] - dp[u]);
                for(int v : inv_mx[i][pos]){
                    dp[v] = min(dp[v], -cht[i].query(c[v]));
                }
            }
        }
        assert(covered);
    }
    for(int i = 1; i < n; i++){
        assert(dp[i] != INF_LL);
        printf("%lld ", dp[i]);
    }
    printf("\n");
    assert(getchar()==-1);
} 



Question Link:-https://www.codechef.com/problems/UWCOI21G
